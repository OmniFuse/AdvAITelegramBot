import pyrogram
from pyrogram import filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.types import Message
from pyrogram.types import CallbackQuery
from modules.lang import async_translate_to_lang, batch_translate, format_with_mention, translate_ui_element
from modules.chatlogs import channel_log
import database.user_db as user_db
from config import ADMINS
import asyncio
import logging

logger = logging.getLogger(__name__)

# Define button texts with emojis for groups
group_button_list = [
    "üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã",
    "ü§ñ –û –±–æ—Ç–µ",
    "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
]

group_welcome_text = """
üöÄ **Advanced AI Bot –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!**

**–ü—Ä–∏–≤–µ—Ç, {group_name}!**

–¢–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤—Å–µ–º –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ:

‚Ä¢ üí¨ **–£–º–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã**
‚Ä¢ üîç **–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π**
‚Ä¢ üñºÔ∏è **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**
‚Ä¢ üéôÔ∏è **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞**
‚Ä¢ üåê **–ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**
‚Ä¢ üìù **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞**

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–∏–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏.
"""

group_tip_text = "üí° **–°–æ–≤–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /img —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\n**–ë–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥: /help.**"

LOGO = "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdnp4MnR0YXk3ZGNjenR6NGRoaDNkc2h2NDgxa285NnExaGM1MTZmYyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/S60CrN9iMxFlyp7uM8/giphy.gif"

# Command section for groups
group_command_text = """
**ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø ü§ñ

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø.

**@AdvChatGptBot**
"""

group_ai_commands_text = """
**üß† –ö–æ–º–∞–Ω–¥—ã AI-—á–∞—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø**

**–û—Å–Ω–æ–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ai [–≤–æ–ø—Ä–æ—Å]`, —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
  –ü—Ä–∏–º–µ—Ä: `/ai —Å—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?`
- –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
- –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/ask [–≤–æ–ø—Ä–æ—Å]` –∏–ª–∏ `/say [–≤–æ–ø—Ä–æ—Å]`

**–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–∞–º—è—Ç—å:**
- –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ü–µ–ø–æ—á–∫–µ –æ—Ç–≤–µ—Ç–æ–≤
- –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–æ–π —Å–±—Ä–æ—Å–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
- –ì—Ä—É–ø–ø–æ–≤—ã–µ –±–µ—Å–µ–¥—ã –æ—Ç–¥–µ–ª–µ–Ω—ã –æ—Ç –ª–∏—á–Ω—ã—Ö

**–°–æ–≤–µ—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø:**
- –î–ª—è –∫–æ–¥–∞ —è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é –±–ª–æ–∫–∏
- –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
- –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö

**@AdvChatGptBot**
"""

group_image_commands_text = """
**üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö**

**–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/generate [–∑–∞–ø—Ä–æ—Å]` –∏–ª–∏ `/img [–∑–∞–ø—Ä–æ—Å]` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  –ü—Ä–∏–º–µ—Ä: `/img –∫–∏–±–µ—Ä–ø–∞–Ω–∫-–≥–æ—Ä–æ–¥ –Ω–æ—á—å—é`
- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥—è—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏–ª–∏ —Å—Ç–∏–ª–µ–π

**–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
- –î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ "scan" –≤ –ø–æ–¥–ø–∏—Å—å
- –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/ai analyze this`

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ:**
- –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
- –î–æ—Å—Ç—É–ø–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ú–æ–≥—É—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø—Ä–æ—Ç–∏–≤ —Å–ø–∞–º–∞

**@AdvChatGptBot**
"""

**üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≥—Ä—É–ø–ø—ã**

**/start** - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
**/help** - –ø–æ–º–æ—â—å –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –≤ –≥—Ä—É–ø–ø–µ
**/settings** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã:**
- `/pin` - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
- `/unpin` - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
- `/warn` - –≤—ã–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

**@AdvChatGptBot**
"""

**‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞**

–≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.

**/restart** - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
**/stats** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
**/gleave** - –≤—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
**/announce** - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º/–≥—Ä—É–ø–ø–∞–º

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

**@AdvChatGptBot**
"""

async def group_start(client, message):
    """Handle the start command in groups with a modern welcome message"""
    
    # Add the group to database if not already exists
    group_id = message.chat.id
    group_name = message.chat.title
    
    # Get admin user's info who sent the command
    user_id = message.from_user.id
    
    # Check and add user to database
    await user_db.check_and_add_user(user_id)
    if message.from_user.username:
        await user_db.check_and_add_username(user_id, message.from_user.username)
    
    # Get language for translation
    user_lang = user_db.get_user_language(user_id)
    
    # Format the welcome text with group name
    formatted_text = group_welcome_text.replace("{group_name}", group_name)
    translated_welcome = await async_translate_to_lang(formatted_text, user_lang)
    
    # Translate tip text and replace bot username
    translated_tip = await async_translate_to_lang(
        group_tip_text.replace("{bot_username}", client.me.username), 
        user_lang
    )
    
    # Translate button texts
    translated_buttons = await batch_translate(group_button_list, user_id)
    
    # Create the inline keyboard buttons with translated text (arranged in two rows)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(translated_buttons[0], callback_data="group_commands"),
         InlineKeyboardButton(translated_buttons[1], callback_data="about_bot")],
        [InlineKeyboardButton(translated_buttons[2], callback_data="group_support")]
    ])
    
    # Send the welcome message with the GIF and the keyboard
    await client.send_animation(
        chat_id=group_id,
        animation=LOGO,
        caption=translated_welcome,
        reply_markup=keyboard
    )
    
    await message.reply_text(translated_tip)
    
    # Check bot permissions and update group stats
    from modules.group.group_permissions import check_bot_permissions, update_group_stats, send_permissions_message
    
    try:
        # Check permissions
        permissions = await check_bot_permissions(client, group_id)
        
        # Update group stats
        await update_group_stats(group_id, permissions, user_id)
        
        # Send permissions message if needed
        await asyncio.sleep(1)  # Small delay to let welcome message be seen first
        await send_permissions_message(client, group_id, permissions)
        
        # Schedule permission check and potential leave after 5 minutes
        from modules.group.group_permissions import leave_group_if_no_permissions
        asyncio.create_task(delayed_permission_check(client, group_id))
    except Exception as e:
        # Log error but continue
        logger.error(f"Error checking permissions in group_start: {e}")
    
    # Log the bot being added to a group
    log_text = f"Bot started in group: {group_name} (ID: {group_id}) by user {message.from_user.mention}"
    await channel_log(client, message, "/start", log_text)

async def delayed_permission_check(client, chat_id, delay_seconds=300):
    """
    Check permissions after a delay and leave if required permissions are missing
    
    Args:
        client: Telegram client
        chat_id: Chat ID to check
        delay_seconds: Delay before checking (default: 5 minutes)
    """
    try:
        # Wait for the specified delay
        await asyncio.sleep(delay_seconds)
        
        # Import and check permissions
        from modules.group.group_permissions import leave_group_if_no_permissions
        await leave_group_if_no_permissions(client, chat_id)
        
    except Exception as e:
        logger.error(f"Error in delayed permission check: {e}")

# Content for group-specific callback handlers
group_commands_text = """
## üõ†Ô∏è **Bot Commands** for Group Chats

**Basic Commands:**
‚Ä¢ `/start` - Show this welcome message
‚Ä¢ `/help` - Get help with bot features
‚Ä¢ `/settings` - Configure bot preferences

**AI Interaction:**
‚Ä¢ Reply directly to the bot's messages
‚Ä¢ Use `/ai [question]` for specific AI queries

**Image Generation:**
‚Ä¢ `/generate [description]` - Create images
‚Ä¢ `/image [idea]` - Generate visual content

**Group Administration:**
‚Ä¢ Only group admins can change bot settings
‚Ä¢ Configure permissions in Group Settings

**Need more help?** Use the Support button below.
"""

## ‚ö° **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏** –≤ –≥—Ä—É–ø–ø–∞—Ö


**–£–º–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –±–µ—Å–µ–¥—ã
‚Ä¢ –û—Ç–≤–µ—Ç—ã –≤ –≤–µ—Ç–∫–∞—Ö –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
**–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
‚Ä¢ –¢–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–Ω–∞–Ω–∏–π:**
‚Ä¢ –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞
**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø:**
‚Ä¢ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FAQ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
about_bot_text = """

**–°–æ–∑–¥–∞–Ω –Ω–∞ –±–∞–∑–µ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:**
‚Ä¢ GPT-4o –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ DALL¬∑E 3 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ Whisper –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
‚Ä¢ –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
**–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ
‚Ä¢ –õ–∏—á–Ω—ã–µ –±–µ—Å–µ–¥—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –≥—Ä—É–ø–ø –æ—Å—Ç–∞—ë—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º
**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–µ—Å–µ–¥–∞–º–∏
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""
**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî [Chandan Singh](https://techycsr.me)** (@techycsr)
group_settings_text = """

## ‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã**
‚Ä¢ –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤

**–í–ª–∞–¥–µ–ª—å—Ü—É/–∞–¥–º–∏–Ω—É –¥–æ—Å—Ç—É–ø–Ω—ã:**

‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –∏ —Ç–æ–Ω–∞
‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫—Ç–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
**–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è:**
‚Ä¢ –°–≤–æ—ë –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –û—Ç—á—ë—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –º–µ–Ω—è—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã.
group_support_text = """
ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ Advanced AI**

–≠—Ç–æ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–º–µ–µ—Ç –º–Ω–æ–≥–æ–µ –≤ –≥—Ä—É–ø–ø–∞—Ö:
‚Ä¢ üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å DALL‚ÄëE 3
‚Ä¢ üéôÔ∏è –ü–æ–Ω–∏–º–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ üìù –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö
‚Ä¢ üí¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
‚Ä¢ üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
**–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:** [Chandan Singh](https://techycsr.me)
**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** GPT-4o –∏ GPT-4o-mini
**–í–µ—Ä—Å–∏—è:** 2.0
"""
**–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ.
async def handle_group_command_inline(client, callback):
    user_id = callback.from_user.id
    
    # Translate the command text and buttons
    texts_to_translate = [group_command_text, "üß† AI in Groups", "üñºÔ∏è Image Commands", "üìã Main Commands", "üîô Back"]
    translated_texts = await batch_translate(texts_to_translate, user_id)
    
    # Extract translated results
    translated_command = translated_texts[0]
    ai_btn = translated_texts[1]
    img_btn = translated_texts[2]
    main_btn = translated_texts[3]
    back_btn = translated_texts[4]
    
    # Create base keyboard
    keyboard_buttons = [
        [InlineKeyboardButton(ai_btn, callback_data="group_cmd_ai")],
        [InlineKeyboardButton(img_btn, callback_data="group_cmd_img")],
        [InlineKeyboardButton(main_btn, callback_data="group_cmd_main")]
    ]
    
    # Add admin button if user is an admin
    if user_id in ADMINS:
        admin_btn = "‚öôÔ∏è Admin Commands"
        keyboard_buttons.append([InlineKeyboardButton(admin_btn, callback_data="group_cmd_admin")])
    
    # Add back button
    keyboard_buttons.append([InlineKeyboardButton(back_btn, callback_data="back_to_group_start")])
    
    keyboard = InlineKeyboardMarkup(keyboard_buttons)

    await client.edit_message_caption(
        chat_id=callback.message.chat.id,
        message_id=callback.message.id,
        caption=translated_command,
        reply_markup=keyboard
    )

    await callback.answer()
    return

async def handle_group_callbacks(client, callback):
    """Handle callbacks for group-specific buttons"""
    
    user_id = callback.from_user.id
    callback_data = callback.data
    user_lang = user_db.get_user_language(user_id)
    
    # Prepare back button for all menus
    back_btn_text = "‚Ü©Ô∏è Back to Main Menu"
    translated_back = await async_translate_to_lang(back_btn_text, user_lang)
    back_keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton(translated_back, callback_data="back_to_group_start")
    ]])
    
    # Handle different callback types
    if callback_data == "group_commands":
        # Show commands menu
        await handle_group_command_inline(client, callback)
        
    elif callback_data == "group_cmd_ai":
        # Show AI commands for groups
        translated_text = await async_translate_to_lang(group_ai_commands_text, user_lang)
        back_btn = await translate_ui_element("üîô Back to Commands", user_lang)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(back_btn, callback_data="group_commands")]
        ])
        
        await client.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            caption=translated_text,
            reply_markup=keyboard
        )
        
    elif callback_data == "group_cmd_img":
        # Show Image commands for groups
        translated_text = await async_translate_to_lang(group_image_commands_text, user_lang)
        back_btn = await translate_ui_element("üîô Back to Commands", user_lang)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(back_btn, callback_data="group_commands")]
        ])
        
        await client.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            caption=translated_text,
            reply_markup=keyboard
        )
        
    elif callback_data == "group_cmd_main":
        # Show main commands for groups
        translated_text = await async_translate_to_lang(group_main_commands_text, user_lang)
        back_btn = await translate_ui_element("üîô Back to Commands", user_lang)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(back_btn, callback_data="group_commands")]
        ])
        
        await client.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            caption=translated_text,
            reply_markup=keyboard
        )
    
    elif callback_data == "group_cmd_admin":
        # Show admin commands (only for admins)
        if user_id in ADMINS:
            back_btn = await translate_ui_element("üîô Back to Commands", user_lang)
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(back_btn, callback_data="group_commands")]
            ])
            
            translated_text = await async_translate_to_lang(group_admin_commands_text, user_lang)
            
            await client.edit_message_caption(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                caption=translated_text,
                reply_markup=keyboard
            )
        else:
            # User is not an admin, show unauthorized message
            await callback.answer("You don't have permission to view admin commands", show_alert=True)
        
    elif callback_data == "about_bot":
        # Show information about the bot
        translated_text = await async_translate_to_lang(about_bot_text, user_lang)
        
        await client.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            caption=translated_text,
            reply_markup=back_keyboard
        )
        
    elif callback_data == "group_support":
        # Show support information similar to private chat support
        translated_support = await async_translate_to_lang(group_support_text, user_lang)
        
        # Translate button labels
        contact_btn = await async_translate_to_lang("üë• Contact Developer", user_lang)
        community_btn = await async_translate_to_lang("üåê Community", user_lang)
        source_code_btn = await async_translate_to_lang("‚å®Ô∏è Source Code", user_lang)
        back_btn = await async_translate_to_lang("üîô Back", user_lang)
        
        # Create keyboard with support options
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(contact_btn, url="https://t.me/techycsr"),
                InlineKeyboardButton(community_btn, url="https://t.me/AdvChatGpt")
            ],
            [
                InlineKeyboardButton(source_code_btn, url="https://github.com/TechyCSR/AdvAITelegramBot")
            ],
            [
                InlineKeyboardButton(back_btn, callback_data="back_to_group_start")
            ]
        ])
        
        await client.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            caption=translated_support,
            reply_markup=keyboard
        )
        
    elif callback_data == "back_to_group_start":
        # Return to the main group welcome screen
        group_name = callback.message.chat.title
        
        # Format the welcome text with group name
        formatted_text = group_welcome_text.replace("{group_name}", group_name)
        translated_welcome = await async_translate_to_lang(formatted_text, user_lang)
        
        # Translate button texts
        translated_buttons = await batch_translate(group_button_list, user_id)
        
        # Create the inline keyboard buttons with translated text (arranged in two rows)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(translated_buttons[0], callback_data="group_commands"),
             InlineKeyboardButton(translated_buttons[1], callback_data="about_bot")],
            [InlineKeyboardButton(translated_buttons[2], callback_data="group_support")]
        ])
        
        await client.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            caption=translated_welcome,
            reply_markup=keyboard
        )
    
    # Acknowledge the callback
    await callback.answer() 

    